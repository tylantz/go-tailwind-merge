package gen

// In order to edit this file, you need to install the omissis/go-jsonschema package

// Properties schema: https://github.com/mdn/data/blob/main/css/properties.schema.json
// You need to copy the grouplist from the adjascent definitions.json file into groups#items

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

import "encoding/json"
import "fmt"
import "reflect"

type AlsoApplyTo []AlsoApplyToElem

type AlsoApplyToElem string

const AlsoApplyToElemFirstLetter AlsoApplyToElem = "::first-letter"
const AlsoApplyToElemFirstLine AlsoApplyToElem = "::first-line"
const AlsoApplyToElemPlaceholder AlsoApplyToElem = "::placeholder"

type AnimationType string

const AnimationTypeAngleBasicShapeOrPath AnimationType = "angleBasicShapeOrPath"
const AnimationTypeAngleOrBasicShapeOrPath AnimationType = "angleOrBasicShapeOrPath"
const AnimationTypeBasicShapeOtherwiseNo AnimationType = "basicShapeOtherwiseNo"
const AnimationTypeByComputedValueType AnimationType = "byComputedValueType"
const AnimationTypeByComputedValueTypeNormalAnimatesAsObliqueZeroDeg AnimationType = "byComputedValueTypeNormalAnimatesAsObliqueZeroDeg"
const AnimationTypeColor AnimationType = "color"
const AnimationTypeDiscrete AnimationType = "discrete"
const AnimationTypeDiscreteButVisibleForDurationWhenAnimatedHidden AnimationType = "discreteButVisibleForDurationWhenAnimatedHidden"
const AnimationTypeDiscreteButVisibleForDurationWhenAnimatedNone AnimationType = "discreteButVisibleForDurationWhenAnimatedNone"
const AnimationTypeEachOfShorthandPropertiesExceptUnicodeBiDiAndDirection AnimationType = "eachOfShorthandPropertiesExceptUnicodeBiDiAndDirection"
const AnimationTypeFilterList AnimationType = "filterList"
const AnimationTypeFontStretch AnimationType = "fontStretch"
const AnimationTypeFontWeight AnimationType = "fontWeight"
const AnimationTypeInteger AnimationType = "integer"
const AnimationTypeLength AnimationType = "length"
const AnimationTypeLpc AnimationType = "lpc"
const AnimationTypeNotAnimatable AnimationType = "notAnimatable"
const AnimationTypeNumber AnimationType = "number"
const AnimationTypeNumberOrLength AnimationType = "numberOrLength"
const AnimationTypePosition AnimationType = "position"
const AnimationTypeRectangle AnimationType = "rectangle"
const AnimationTypeRepeatableList AnimationType = "repeatableList"
const AnimationTypeShadowList AnimationType = "shadowList"
const AnimationTypeSimpleListOfLpc AnimationType = "simpleListOfLpc"
const AnimationTypeSimpleListOfLpcDifferenceLpc AnimationType = "simpleListOfLpcDifferenceLpc"
const AnimationTypeTransform AnimationType = "transform"
const AnimationTypeVisibility AnimationType = "visibility"

type Appliesto string

const AppliestoAbsolutelyPositionedElements Appliesto = "absolutelyPositionedElements"
const AppliestoAllElements Appliesto = "allElements"
const AppliestoAllElementsAcceptingWidthOrHeight Appliesto = "allElementsAcceptingWidthOrHeight"
const AppliestoAllElementsAndPseudos Appliesto = "allElementsAndPseudos"
const AppliestoAllElementsAndText Appliesto = "allElementsAndText"
const AppliestoAllElementsButNonReplacedAndTableColumns Appliesto = "allElementsButNonReplacedAndTableColumns"
const AppliestoAllElementsButNonReplacedAndTableRows Appliesto = "allElementsButNonReplacedAndTableRows"
const AppliestoAllElementsCreatingNativeWindows Appliesto = "allElementsCreatingNativeWindows"
const AppliestoAllElementsExceptGeneratedContentOrPseudoElements Appliesto = "allElementsExceptGeneratedContentOrPseudoElements"
const AppliestoAllElementsExceptInlineBoxesAndInternalRubyOrTableBoxes Appliesto = "allElementsExceptInlineBoxesAndInternalRubyOrTableBoxes"
const AppliestoAllElementsExceptInternalTableDisplayTypes Appliesto = "allElementsExceptInternalTableDisplayTypes"
const AppliestoAllElementsExceptNonReplacedInlineElementsTableRowsColumnsRowColumnGroups Appliesto = "allElementsExceptNonReplacedInlineElementsTableRowsColumnsRowColumnGroups"
const AppliestoAllElementsExceptTableDisplayTypes Appliesto = "allElementsExceptTableDisplayTypes"
const AppliestoAllElementsExceptTableElementsWhenCollapse Appliesto = "allElementsExceptTableElementsWhenCollapse"
const AppliestoAllElementsExceptTableRowColumnGroupsTableRowsColumns Appliesto = "allElementsExceptTableRowColumnGroupsTableRowsColumns"
const AppliestoAllElementsExceptTableRowGroupsRowsColumnGroupsAndColumns Appliesto = "allElementsExceptTableRowGroupsRowsColumnGroupsAndColumns"
const AppliestoAllElementsNoEffectIfDisplayNone Appliesto = "allElementsNoEffectIfDisplayNone"
const AppliestoAllElementsSVGContainerElements Appliesto = "allElementsSVGContainerElements"
const AppliestoAllElementsSVGContainerGraphicsAndGraphicsReferencingElements Appliesto = "allElementsSVGContainerGraphicsAndGraphicsReferencingElements"
const AppliestoAllElementsSomeValuesNoEffectOnNonInlineElements Appliesto = "allElementsSomeValuesNoEffectOnNonInlineElements"
const AppliestoAllElementsThatCanReferenceImages Appliesto = "allElementsThatCanReferenceImages"
const AppliestoAllElementsTreeAbidingPseudoElementsPageMarginBoxes Appliesto = "allElementsTreeAbidingPseudoElementsPageMarginBoxes"
const AppliestoAllElementsUAsNotRequiredWhenCollapse Appliesto = "allElementsUAsNotRequiredWhenCollapse"
const AppliestoAnyElementEffectOnProgressAndMeter Appliesto = "anyElementEffectOnProgressAndMeter"
const AppliestoBeforeAndAfterPseudos Appliesto = "beforeAndAfterPseudos"
const AppliestoBlockContainerElements Appliesto = "blockContainerElements"
const AppliestoBlockContainers Appliesto = "blockContainers"
const AppliestoBlockContainersAndMultiColumnContainers Appliesto = "blockContainersAndMultiColumnContainers"
const AppliestoBlockContainersExceptMultiColumnContainers Appliesto = "blockContainersExceptMultiColumnContainers"
const AppliestoBlockContainersExceptTableWrappers Appliesto = "blockContainersExceptTableWrappers"
const AppliestoBlockContainersFlexContainersGridContainers Appliesto = "blockContainersFlexContainersGridContainers"
const AppliestoBlockElementsInNormalFlow Appliesto = "blockElementsInNormalFlow"
const AppliestoBlockLevelBoxesAndAbsolutelyPositionedBoxesAndGridItems Appliesto = "blockLevelBoxesAndAbsolutelyPositionedBoxesAndGridItems"
const AppliestoBlockLevelElements Appliesto = "blockLevelElements"
const AppliestoBoxElements Appliesto = "boxElements"
const AppliestoChildrenOfBoxElements Appliesto = "childrenOfBoxElements"
const AppliestoDirectChildrenOfElementsWithDisplayMozBoxMozInlineBox Appliesto = "directChildrenOfElementsWithDisplayMozBoxMozInlineBox"
const AppliestoElementsForWhichLayoutContainmentCanApply Appliesto = "elementsForWhichLayoutContainmentCanApply"
const AppliestoElementsForWhichSizeContainmentCanApply Appliesto = "elementsForWhichSizeContainmentCanApply"
const AppliestoElementsThatAcceptInput Appliesto = "elementsThatAcceptInput"
const AppliestoElementsWithDisplayBoxOrInlineBox Appliesto = "elementsWithDisplayBoxOrInlineBox"
const AppliestoElementsWithDisplayMarker Appliesto = "elementsWithDisplayMarker"
const AppliestoElementsWithDisplayMozBoxMozInlineBox Appliesto = "elementsWithDisplayMozBoxMozInlineBox"
const AppliestoElementsWithOverflowNotVisibleAndReplacedElements Appliesto = "elementsWithOverflowNotVisibleAndReplacedElements"
const AppliestoExclusionElements Appliesto = "exclusionElements"
const AppliestoFirstLetterPseudoElementsAndInlineLevelFirstChildren Appliesto = "firstLetterPseudoElementsAndInlineLevelFirstChildren"
const AppliestoFlexContainers Appliesto = "flexContainers"
const AppliestoFlexItemsAndAbsolutelyPositionedFlexContainerChildren Appliesto = "flexItemsAndAbsolutelyPositionedFlexContainerChildren"
const AppliestoFlexItemsAndInFlowPseudos Appliesto = "flexItemsAndInFlowPseudos"
const AppliestoFlexItemsGridItemsAbsolutelyPositionedContainerChildren Appliesto = "flexItemsGridItemsAbsolutelyPositionedContainerChildren"
const AppliestoFlexItemsGridItemsAndAbsolutelyPositionedBoxes Appliesto = "flexItemsGridItemsAndAbsolutelyPositionedBoxes"
const AppliestoFloats Appliesto = "floats"
const AppliestoGridContainers Appliesto = "gridContainers"
const AppliestoGridContainersWithMasonryLayout Appliesto = "gridContainersWithMasonryLayout"
const AppliestoGridContainersWithMasonryLayoutInTheirBlockAxis Appliesto = "gridContainersWithMasonryLayoutInTheirBlockAxis"
const AppliestoGridContainersWithMasonryLayoutInTheirInlineAxis Appliesto = "gridContainersWithMasonryLayoutInTheirInlineAxis"
const AppliestoGridItemsAndBoxesWithinGridContainer Appliesto = "gridItemsAndBoxesWithinGridContainer"
const AppliestoIframeElements Appliesto = "iframeElements"
const AppliestoImages Appliesto = "images"
const AppliestoInFlowBlockLevelElements Appliesto = "inFlowBlockLevelElements"
const AppliestoInFlowChildrenOfBoxElements Appliesto = "inFlowChildrenOfBoxElements"
const AppliestoInlineBoxesAndBlockContainers Appliesto = "inlineBoxesAndBlockContainers"
const AppliestoInlineLevelAndTableCellElements Appliesto = "inlineLevelAndTableCellElements"
const AppliestoListItems Appliesto = "listItems"
const AppliestoMaskElements Appliesto = "maskElements"
const AppliestoMultiColumnElementsFlexContainersGridContainers Appliesto = "multiColumnElementsFlexContainersGridContainers"
const AppliestoMulticolElements Appliesto = "multicolElements"
const AppliestoMultilineFlexContainers Appliesto = "multilineFlexContainers"
const AppliestoNonReplacedBlockAndInlineBlockElements Appliesto = "nonReplacedBlockAndInlineBlockElements"
const AppliestoNonReplacedBlockElements Appliesto = "nonReplacedBlockElements"
const AppliestoNonReplacedElements Appliesto = "nonReplacedElements"
const AppliestoNonReplacedInlineElements Appliesto = "nonReplacedInlineElements"
const AppliestoPositionedElements Appliesto = "positionedElements"
const AppliestoReplacedElements Appliesto = "replacedElements"
const AppliestoRubyAnnotationsContainers Appliesto = "rubyAnnotationsContainers"
const AppliestoRubyBasesAnnotationsBaseAnnotationContainers Appliesto = "rubyBasesAnnotationsBaseAnnotationContainers"
const AppliestoSameAsMargin Appliesto = "sameAsMargin"
const AppliestoSameAsWidthAndHeight Appliesto = "sameAsWidthAndHeight"
const AppliestoScrollContainers Appliesto = "scrollContainers"
const AppliestoScrollingBoxes Appliesto = "scrollingBoxes"
const AppliestoSensitiveTextInputs Appliesto = "sensitiveTextInputs"
const AppliestoTableCaptionElements Appliesto = "tableCaptionElements"
const AppliestoTableCellElements Appliesto = "tableCellElements"
const AppliestoTableElements Appliesto = "tableElements"
const AppliestoTextAndBlockContainers Appliesto = "textAndBlockContainers"
const AppliestoTextElements Appliesto = "textElements"
const AppliestoTextFields Appliesto = "textFields"
const AppliestoTransformableElements Appliesto = "transformableElements"
const AppliestoXulImageElements Appliesto = "xulImageElements"

type Appliesto_1 interface{}

type Computed string

const ComputedAbsoluteLength Computed = "absoluteLength"
const ComputedAbsoluteLength0ForNone Computed = "absoluteLength0ForNone"
const ComputedAbsoluteLength0IfColumnRuleStyleNoneOrHidden Computed = "absoluteLength0IfColumnRuleStyleNoneOrHidden"
const ComputedAbsoluteLengthOr0IfBorderBottomStyleNoneOrHidden Computed = "absoluteLengthOr0IfBorderBottomStyleNoneOrHidden"
const ComputedAbsoluteLengthOr0IfBorderLeftStyleNoneOrHidden Computed = "absoluteLengthOr0IfBorderLeftStyleNoneOrHidden"
const ComputedAbsoluteLengthOr0IfBorderRightStyleNoneOrHidden Computed = "absoluteLengthOr0IfBorderRightStyleNoneOrHidden"
const ComputedAbsoluteLengthOr0IfBorderTopStyleNoneOrHidden Computed = "absoluteLengthOr0IfBorderTopStyleNoneOrHidden"
const ComputedAbsoluteLengthOrAsSpecified Computed = "absoluteLengthOrAsSpecified"
const ComputedAbsoluteLengthOrKeyword Computed = "absoluteLengthOrKeyword"
const ComputedAbsoluteLengthOrNone Computed = "absoluteLengthOrNone"
const ComputedAbsoluteLengthOrNormal Computed = "absoluteLengthOrNormal"
const ComputedAbsoluteLengthOrPercentage Computed = "absoluteLengthOrPercentage"
const ComputedAbsoluteLengthZeroIfBorderStyleNoneOrHidden Computed = "absoluteLengthZeroIfBorderStyleNoneOrHidden"
const ComputedAbsoluteLengthZeroOrLarger Computed = "absoluteLengthZeroOrLarger"
const ComputedAbsoluteLengthsSpecifiedColorAsSpecified Computed = "absoluteLengthsSpecifiedColorAsSpecified"
const ComputedAbsoluteURIOrNone Computed = "absoluteURIOrNone"
const ComputedAngleRoundedToNextQuarter Computed = "angleRoundedToNextQuarter"
const ComputedAsAutoOrColor Computed = "asAutoOrColor"
const ComputedAsDefinedForBasicShapeWithAbsoluteURIOtherwiseAsSpecified Computed = "asDefinedForBasicShapeWithAbsoluteURIOtherwiseAsSpecified"
const ComputedAsLength Computed = "asLength"
const ComputedAsSpecified Computed = "asSpecified"
const ComputedAsSpecifiedAppliesToEachProperty Computed = "asSpecifiedAppliesToEachProperty"
const ComputedAsSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent Computed = "asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent"
const ComputedAsSpecifiedExceptMatchParent Computed = "asSpecifiedExceptMatchParent"
const ComputedAsSpecifiedExceptPositionedFloatingAndRootElementsKeywordMaybeDifferent Computed = "asSpecifiedExceptPositionedFloatingAndRootElementsKeywordMaybeDifferent"
const ComputedAsSpecifiedRelativeToAbsoluteLengths Computed = "asSpecifiedRelativeToAbsoluteLengths"
const ComputedAsSpecifiedURLsAbsolute Computed = "asSpecifiedURLsAbsolute"
const ComputedAsSpecifiedWithExceptionOfResolution Computed = "asSpecifiedWithExceptionOfResolution"
const ComputedAsSpecifiedWithLengthValuesComputed Computed = "asSpecifiedWithLengthValuesComputed"
const ComputedAsSpecifiedWithLengthsAbsoluteAndNormalComputingToZeroExceptMultiColumn Computed = "asSpecifiedWithLengthsAbsoluteAndNormalComputingToZeroExceptMultiColumn"
const ComputedAsSpecifiedWithVarsSubstituted Computed = "asSpecifiedWithVarsSubstituted"
const ComputedAutoForTranslucentColorRGBAOtherwiseRGB Computed = "autoForTranslucentColorRGBAOtherwiseRGB"
const ComputedAutoOnAbsolutelyPositionedElementsValueOfAlignItemsOnParent Computed = "autoOnAbsolutelyPositionedElementsValueOfAlignItemsOnParent"
const ComputedAutoOrRectangle Computed = "autoOrRectangle"
const ComputedColorPlusThreeAbsoluteLengths Computed = "colorPlusThreeAbsoluteLengths"
const ComputedComputedColor Computed = "computedColor"
const ComputedConsistsOfTwoDimensionKeywords Computed = "consistsOfTwoDimensionKeywords"
const ComputedConsistsOfTwoKeywordsForOriginAndOffsets Computed = "consistsOfTwoKeywordsForOriginAndOffsets"
const ComputedForLengthAbsoluteValueOtherwisePercentage Computed = "forLengthAbsoluteValueOtherwisePercentage"
const ComputedKeywordOrNumericalValueBolderLighterTransformedToRealValue Computed = "keywordOrNumericalValueBolderLighterTransformedToRealValue"
const ComputedKeywordPlusIntegerIfDigits Computed = "keywordPlusIntegerIfDigits"
const ComputedLengthAbsolutePercentageAsSpecifiedOtherwiseAuto Computed = "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto"
const ComputedListEachItemConsistingOfAbsoluteLengthPercentageAndOrigin Computed = "listEachItemConsistingOfAbsoluteLengthPercentageAndOrigin"
const ComputedListEachItemConsistingOfNormalLengthPercentageOrNameLengthPercentage Computed = "listEachItemConsistingOfNormalLengthPercentageOrNameLengthPercentage"
const ComputedListEachItemConsistingOfPairsOfAutoOrLengthPercentage Computed = "listEachItemConsistingOfPairsOfAutoOrLengthPercentage"
const ComputedListEachItemHasTwoKeywordsOnePerDimension Computed = "listEachItemHasTwoKeywordsOnePerDimension"
const ComputedListEachItemIdentifierOrNoneAuto Computed = "listEachItemIdentifierOrNoneAuto"
const ComputedListEachItemTwoKeywordsOriginOffsets Computed = "listEachItemTwoKeywordsOriginOffsets"
const ComputedNoneOrImageWithAbsoluteURI Computed = "noneOrImageWithAbsoluteURI"
const ComputedNoneOrOrderedListOfIdentifiers Computed = "noneOrOrderedListOfIdentifiers"
const ComputedNormalOnElementsForPseudosNoneAbsoluteURIStringOrAsSpecified Computed = "normalOnElementsForPseudosNoneAbsoluteURIStringOrAsSpecified"
const ComputedNormalizedAngle Computed = "normalizedAngle"
const ComputedOneToFourPercentagesOrAbsoluteLengthsPlusFill Computed = "oneToFourPercentagesOrAbsoluteLengthsPlusFill"
const ComputedOptimumValueOfAbsoluteLengthOrNormal Computed = "optimumValueOfAbsoluteLengthOrNormal"
const ComputedPercentageAsSpecifiedAbsoluteLengthOrNone Computed = "percentageAsSpecifiedAbsoluteLengthOrNone"
const ComputedPercentageAsSpecifiedOrAbsoluteLength Computed = "percentageAsSpecifiedOrAbsoluteLength"
const ComputedPercentageAutoOrAbsoluteLength Computed = "percentageAutoOrAbsoluteLength"
const ComputedPercentageOrAbsoluteLengthPlusKeywords Computed = "percentageOrAbsoluteLengthPlusKeywords"
const ComputedSameAsBoxOffsets Computed = "sameAsBoxOffsets"
const ComputedSameAsMaxWidthAndMaxHeight Computed = "sameAsMaxWidthAndMaxHeight"
const ComputedSameAsMinWidthAndMinHeight Computed = "sameAsMinWidthAndMinHeight"
const ComputedSameAsWidthAndHeight Computed = "sameAsWidthAndHeight"
const ComputedSpecifiedIntegerOrAbsoluteLength Computed = "specifiedIntegerOrAbsoluteLength"
const ComputedSpecifiedValueClipped0To1 Computed = "specifiedValueClipped0To1"
const ComputedSpecifiedValueNumberClipped0To1 Computed = "specifiedValueNumberClipped0To1"
const ComputedTheComputedLengthAndVisualBox Computed = "theComputedLengthAndVisualBox"
const ComputedTheKeywordListStyleImageNoneOrComputedValue Computed = "theKeywordListStyleImageNoneOrComputedValue"
const ComputedTranslucentValuesRGBAOtherwiseRGB Computed = "translucentValuesRGBAOtherwiseRGB"
const ComputedTwoAbsoluteLengthOrPercentages Computed = "twoAbsoluteLengthOrPercentages"
const ComputedTwoAbsoluteLengths Computed = "twoAbsoluteLengths"

type GroupsElem string

const GroupsElemBasicSelectors GroupsElem = "Basic Selectors"
const GroupsElemCSSAngles GroupsElem = "CSS Angles"
const GroupsElemCSSAnimations GroupsElem = "CSS Animations"
const GroupsElemCSSBackgroundsAndBorders GroupsElem = "CSS Backgrounds and Borders"
const GroupsElemCSSBasicUserInterface GroupsElem = "CSS Basic User Interface"
const GroupsElemCSSBoxAlignment GroupsElem = "CSS Box Alignment"
const GroupsElemCSSBoxModel GroupsElem = "CSS Box Model"
const GroupsElemCSSBreak GroupsElem = "CSS Break"
const GroupsElemCSSCascadingAndInheritance GroupsElem = "CSS Cascading and Inheritance"
const GroupsElemCSSCharsets GroupsElem = "CSS Charsets"
const GroupsElemCSSColor GroupsElem = "CSS Color"
const GroupsElemCSSColumns GroupsElem = "CSS Columns"
const GroupsElemCSSConditionalRules GroupsElem = "CSS Conditional Rules"
const GroupsElemCSSContainment GroupsElem = "CSS Containment"
const GroupsElemCSSCounterStyles GroupsElem = "CSS Counter Styles"
const GroupsElemCSSDeviceAdaptation GroupsElem = "CSS Device Adaptation"
const GroupsElemCSSDisplay GroupsElem = "CSS Display"
const GroupsElemCSSFlexibleBoxLayout GroupsElem = "CSS Flexible Box Layout"
const GroupsElemCSSFlexibleLengths GroupsElem = "CSS Flexible Lengths"
const GroupsElemCSSFonts GroupsElem = "CSS Fonts"
const GroupsElemCSSFragmentation GroupsElem = "CSS Fragmentation"
const GroupsElemCSSFrequencies GroupsElem = "CSS Frequencies"
const GroupsElemCSSGeneratedContent GroupsElem = "CSS Generated Content"
const GroupsElemCSSGridLayout GroupsElem = "CSS Grid Layout"
const GroupsElemCSSHoudini GroupsElem = "CSS Houdini"
const GroupsElemCSSImages GroupsElem = "CSS Images"
const GroupsElemCSSInline GroupsElem = "CSS Inline"
const GroupsElemCSSLengths GroupsElem = "CSS Lengths"
const GroupsElemCSSListsAndCounters GroupsElem = "CSS Lists and Counters"
const GroupsElemCSSLogicalProperties GroupsElem = "CSS Logical Properties"
const GroupsElemCSSMasking GroupsElem = "CSS Masking"
const GroupsElemCSSMiscellaneous GroupsElem = "CSS Miscellaneous"
const GroupsElemCSSMotionPath GroupsElem = "CSS Motion Path"
const GroupsElemCSSNamespaces GroupsElem = "CSS Namespaces"
const GroupsElemCSSOMView GroupsElem = "CSSOM View"
const GroupsElemCSSOverflow GroupsElem = "CSS Overflow"
const GroupsElemCSSPages GroupsElem = "CSS Pages"
const GroupsElemCSSPositioning GroupsElem = "CSS Positioning"
const GroupsElemCSSRegions GroupsElem = "CSS Regions"
const GroupsElemCSSResolutions GroupsElem = "CSS Resolutions"
const GroupsElemCSSRuby GroupsElem = "CSS Ruby"
const GroupsElemCSSScrollAnchoring GroupsElem = "CSS Scroll Anchoring"
const GroupsElemCSSScrollSnap GroupsElem = "CSS Scroll Snap"
const GroupsElemCSSScrollbars GroupsElem = "CSS Scrollbars"
const GroupsElemCSSShadowParts GroupsElem = "CSS Shadow Parts"
const GroupsElemCSSShapes GroupsElem = "CSS Shapes"
const GroupsElemCSSSpeech GroupsElem = "CSS Speech"
const GroupsElemCSSTable GroupsElem = "CSS Table"
const GroupsElemCSSText GroupsElem = "CSS Text"
const GroupsElemCSSTextDecoration GroupsElem = "CSS Text Decoration"
const GroupsElemCSSTimes GroupsElem = "CSS Times"
const GroupsElemCSSTransforms GroupsElem = "CSS Transforms"
const GroupsElemCSSTransitions GroupsElem = "CSS Transitions"
const GroupsElemCSSTypes GroupsElem = "CSS Types"
const GroupsElemCSSUnits GroupsElem = "CSS Units"
const GroupsElemCSSVariables GroupsElem = "CSS Variables"
const GroupsElemCSSViewTransitions GroupsElem = "CSS View Transitions"
const GroupsElemCSSWillChange GroupsElem = "CSS Will Change"
const GroupsElemCSSWritingModes GroupsElem = "CSS Writing Modes"
const GroupsElemCombinators GroupsElem = "Combinators"
const GroupsElemCompositingAndBlending GroupsElem = "Compositing and Blending"
const GroupsElemFilterEffects GroupsElem = "Filter Effects"
const GroupsElemGroupingSelectors GroupsElem = "Grouping Selectors"
const GroupsElemMathML GroupsElem = "MathML"
const GroupsElemMediaQueries GroupsElem = "Media Queries"
const GroupsElemMicrosoftExtensions GroupsElem = "Microsoft Extensions"
const GroupsElemMozillaExtensions GroupsElem = "Mozilla Extensions"
const GroupsElemPointerEvents GroupsElem = "Pointer Events"
const GroupsElemPseudo GroupsElem = "Pseudo"
const GroupsElemPseudoClasses GroupsElem = "Pseudo-classes"
const GroupsElemPseudoElements GroupsElem = "Pseudo-elements"
const GroupsElemSelectors GroupsElem = "Selectors"
const GroupsElemWebKitExtensions GroupsElem = "WebKit Extensions"

type MdnUrl string

type Order string

const OrderCanonicalOrder Order = "canonicalOrder"
const OrderLengthOrPercentageBeforeKeywordIfBothPresent Order = "lengthOrPercentageBeforeKeywordIfBothPresent"
const OrderLengthOrPercentageBeforeKeywords Order = "lengthOrPercentageBeforeKeywords"
const OrderOneOrTwoValuesLengthAbsoluteKeywordsPercentages Order = "oneOrTwoValuesLengthAbsoluteKeywordsPercentages"
const OrderOrderOfAppearance Order = "orderOfAppearance"
const OrderPerGrammar Order = "perGrammar"
const OrderPercentagesOrLengthsFollowedByFill Order = "percentagesOrLengthsFollowedByFill"
const OrderUniqueOrder Order = "uniqueOrder"

type Order_1 interface{}

type Percentages string

const PercentagesBlockSizeOfContainingBlock Percentages = "blockSizeOfContainingBlock"
const PercentagesDependsOnLayoutModel Percentages = "dependsOnLayoutModel"
const PercentagesInlineSizeOfContainingBlock Percentages = "inlineSizeOfContainingBlock"
const PercentagesLengthsAsPercentages Percentages = "lengthsAsPercentages"
const PercentagesLogicalHeightOfContainingBlock Percentages = "logicalHeightOfContainingBlock"
const PercentagesLogicalHeightOrWidthOfContainingBlock Percentages = "logicalHeightOrWidthOfContainingBlock"
const PercentagesLogicalWidthOfContainingBlock Percentages = "logicalWidthOfContainingBlock"
const PercentagesMapToRange0To1 Percentages = "mapToRange0To1"
const PercentagesMaxZoomFactor Percentages = "maxZoomFactor"
const PercentagesMinZoomFactor Percentages = "minZoomFactor"
const PercentagesNo Percentages = "no"
const PercentagesReferToBorderBox Percentages = "referToBorderBox"
const PercentagesReferToContainingBlockHeight Percentages = "referToContainingBlockHeight"
const PercentagesReferToDimensionOfBorderBox Percentages = "referToDimensionOfBorderBox"
const PercentagesReferToDimensionOfContentArea Percentages = "referToDimensionOfContentArea"
const PercentagesReferToElementFontSize Percentages = "referToElementFontSize"
const PercentagesReferToFlexContainersInnerMainSize Percentages = "referToFlexContainersInnerMainSize"
const PercentagesReferToHeightOfBackgroundPositioningAreaMinusBackgroundImageHeight Percentages = "referToHeightOfBackgroundPositioningAreaMinusBackgroundImageHeight"
const PercentagesReferToLineBoxWidth Percentages = "referToLineBoxWidth"
const PercentagesReferToLineHeight Percentages = "referToLineHeight"
const PercentagesReferToParentElementsFontSize Percentages = "referToParentElementsFontSize"
const PercentagesReferToReferenceBoxWhenSpecifiedOtherwiseBorderBox Percentages = "referToReferenceBoxWhenSpecifiedOtherwiseBorderBox"
const PercentagesReferToSizeOfBackgroundPositioningAreaMinusBackgroundImageSize Percentages = "referToSizeOfBackgroundPositioningAreaMinusBackgroundImageSize"
const PercentagesReferToSizeOfBorderImage Percentages = "referToSizeOfBorderImage"
const PercentagesReferToSizeOfBoundingBox Percentages = "referToSizeOfBoundingBox"
const PercentagesReferToSizeOfContainingBlock Percentages = "referToSizeOfContainingBlock"
const PercentagesReferToSizeOfElement Percentages = "referToSizeOfElement"
const PercentagesReferToSizeOfFont Percentages = "referToSizeOfFont"
const PercentagesReferToSizeOfMaskBorderImage Percentages = "referToSizeOfMaskBorderImage"
const PercentagesReferToSizeOfMaskPaintingArea Percentages = "referToSizeOfMaskPaintingArea"
const PercentagesReferToTotalPathLength Percentages = "referToTotalPathLength"
const PercentagesReferToWidthAndHeightOfElement Percentages = "referToWidthAndHeightOfElement"
const PercentagesReferToWidthOfAffectedGlyph Percentages = "referToWidthOfAffectedGlyph"
const PercentagesReferToWidthOfBackgroundPositioningAreaMinusBackgroundImageWidth Percentages = "referToWidthOfBackgroundPositioningAreaMinusBackgroundImageWidth"
const PercentagesReferToWidthOfContainingBlock Percentages = "referToWidthOfContainingBlock"
const PercentagesReferToWidthOrHeightOfBorderImageArea Percentages = "referToWidthOrHeightOfBorderImageArea"
const PercentagesRegardingHeightOfGeneratedBoxContainingBlockPercentages0 Percentages = "regardingHeightOfGeneratedBoxContainingBlockPercentages0"
const PercentagesRegardingHeightOfGeneratedBoxContainingBlockPercentagesNone Percentages = "regardingHeightOfGeneratedBoxContainingBlockPercentagesNone"
const PercentagesRegardingHeightOfGeneratedBoxContainingBlockPercentagesRelativeToContainingBlock Percentages = "regardingHeightOfGeneratedBoxContainingBlockPercentagesRelativeToContainingBlock"
const PercentagesRelativeToBackgroundPositioningArea Percentages = "relativeToBackgroundPositioningArea"
const PercentagesRelativeToCorrespondingDimensionOfRelevantScrollport Percentages = "relativeToCorrespondingDimensionOfRelevantScrollport"
const PercentagesRelativeToMaskBorderImageArea Percentages = "relativeToMaskBorderImageArea"
const PercentagesRelativeToScrollContainerPaddingBoxAxis Percentages = "relativeToScrollContainerPaddingBoxAxis"
const PercentagesRelativeToTheScrollContainersScrollport Percentages = "relativeToTheScrollContainersScrollport"
const PercentagesRelativeToTimelineRangeIfSpecifiedOtherwiseEntireTimeline Percentages = "relativeToTimelineRangeIfSpecifiedOtherwiseEntireTimeline"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Percentages) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Percentages {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Percentages, v)
	}
	*j = Percentages(v)
	return nil
}

type Status_1 interface{}

var enumValues_Computed = []interface{}{
	"absoluteLength",
	"absoluteLength0ForNone",
	"absoluteLength0IfColumnRuleStyleNoneOrHidden",
	"absoluteLengthOr0IfBorderBottomStyleNoneOrHidden",
	"absoluteLengthOr0IfBorderLeftStyleNoneOrHidden",
	"absoluteLengthOr0IfBorderRightStyleNoneOrHidden",
	"absoluteLengthOr0IfBorderTopStyleNoneOrHidden",
	"absoluteLengthOrAsSpecified",
	"absoluteLengthOrKeyword",
	"absoluteLengthOrNone",
	"absoluteLengthOrNormal",
	"absoluteLengthOrPercentage",
	"absoluteLengthsSpecifiedColorAsSpecified",
	"absoluteLengthZeroIfBorderStyleNoneOrHidden",
	"absoluteLengthZeroOrLarger",
	"absoluteURIOrNone",
	"angleRoundedToNextQuarter",
	"asAutoOrColor",
	"asDefinedForBasicShapeWithAbsoluteURIOtherwiseAsSpecified",
	"asLength",
	"asSpecified",
	"asSpecifiedAppliesToEachProperty",
	"asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent",
	"asSpecifiedExceptMatchParent",
	"asSpecifiedExceptPositionedFloatingAndRootElementsKeywordMaybeDifferent",
	"asSpecifiedRelativeToAbsoluteLengths",
	"asSpecifiedURLsAbsolute",
	"asSpecifiedWithExceptionOfResolution",
	"asSpecifiedWithLengthsAbsoluteAndNormalComputingToZeroExceptMultiColumn",
	"asSpecifiedWithLengthValuesComputed",
	"asSpecifiedWithVarsSubstituted",
	"autoOnAbsolutelyPositionedElementsValueOfAlignItemsOnParent",
	"autoOrRectangle",
	"colorPlusThreeAbsoluteLengths",
	"computedColor",
	"consistsOfTwoDimensionKeywords",
	"consistsOfTwoKeywordsForOriginAndOffsets",
	"forLengthAbsoluteValueOtherwisePercentage",
	"autoForTranslucentColorRGBAOtherwiseRGB",
	"keywordOrNumericalValueBolderLighterTransformedToRealValue",
	"keywordPlusIntegerIfDigits",
	"lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
	"listEachItemConsistingOfAbsoluteLengthPercentageAndOrigin",
	"listEachItemConsistingOfNormalLengthPercentageOrNameLengthPercentage",
	"listEachItemConsistingOfPairsOfAutoOrLengthPercentage",
	"listEachItemHasTwoKeywordsOnePerDimension",
	"listEachItemIdentifierOrNoneAuto",
	"listEachItemTwoKeywordsOriginOffsets",
	"noneOrImageWithAbsoluteURI",
	"noneOrOrderedListOfIdentifiers",
	"normalizedAngle",
	"normalOnElementsForPseudosNoneAbsoluteURIStringOrAsSpecified",
	"oneToFourPercentagesOrAbsoluteLengthsPlusFill",
	"optimumValueOfAbsoluteLengthOrNormal",
	"percentageAsSpecifiedAbsoluteLengthOrNone",
	"percentageAsSpecifiedOrAbsoluteLength",
	"percentageAutoOrAbsoluteLength",
	"percentageOrAbsoluteLengthPlusKeywords",
	"sameAsBoxOffsets",
	"sameAsMaxWidthAndMaxHeight",
	"sameAsMinWidthAndMinHeight",
	"sameAsWidthAndHeight",
	"specifiedIntegerOrAbsoluteLength",
	"specifiedValueClipped0To1",
	"specifiedValueNumberClipped0To1",
	"theComputedLengthAndVisualBox",
	"theKeywordListStyleImageNoneOrComputedValue",
	"translucentValuesRGBAOtherwiseRGB",
	"twoAbsoluteLengthOrPercentages",
	"twoAbsoluteLengths",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Appliesto) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Appliesto {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Appliesto, v)
	}
	*j = Appliesto(v)
	return nil
}

var enumValues_Appliesto = []interface{}{
	"absolutelyPositionedElements",
	"allElements",
	"allElementsAcceptingWidthOrHeight",
	"allElementsAndPseudos",
	"allElementsAndText",
	"allElementsButNonReplacedAndTableColumns",
	"allElementsButNonReplacedAndTableRows",
	"allElementsCreatingNativeWindows",
	"allElementsExceptGeneratedContentOrPseudoElements",
	"allElementsExceptInlineBoxesAndInternalRubyOrTableBoxes",
	"allElementsExceptInternalTableDisplayTypes",
	"allElementsExceptNonReplacedInlineElementsTableRowsColumnsRowColumnGroups",
	"allElementsExceptTableDisplayTypes",
	"allElementsExceptTableElementsWhenCollapse",
	"allElementsExceptTableRowColumnGroupsTableRowsColumns",
	"allElementsExceptTableRowGroupsRowsColumnGroupsAndColumns",
	"allElementsNoEffectIfDisplayNone",
	"allElementsSomeValuesNoEffectOnNonInlineElements",
	"allElementsSVGContainerElements",
	"allElementsSVGContainerGraphicsAndGraphicsReferencingElements",
	"allElementsThatCanReferenceImages",
	"allElementsTreeAbidingPseudoElementsPageMarginBoxes",
	"allElementsUAsNotRequiredWhenCollapse",
	"anyElementEffectOnProgressAndMeter",
	"beforeAndAfterPseudos",
	"blockContainerElements",
	"blockContainers",
	"blockContainersAndMultiColumnContainers",
	"blockContainersExceptMultiColumnContainers",
	"blockContainersExceptTableWrappers",
	"blockContainersFlexContainersGridContainers",
	"blockElementsInNormalFlow",
	"blockLevelElements",
	"blockLevelBoxesAndAbsolutelyPositionedBoxesAndGridItems",
	"boxElements",
	"childrenOfBoxElements",
	"directChildrenOfElementsWithDisplayMozBoxMozInlineBox",
	"elementsForWhichLayoutContainmentCanApply",
	"elementsForWhichSizeContainmentCanApply",
	"elementsThatAcceptInput",
	"elementsWithDisplayBoxOrInlineBox",
	"elementsWithDisplayMarker",
	"elementsWithDisplayMozBoxMozInlineBox",
	"elementsWithOverflowNotVisibleAndReplacedElements",
	"exclusionElements",
	"firstLetterPseudoElementsAndInlineLevelFirstChildren",
	"flexContainers",
	"flexItemsAndAbsolutelyPositionedFlexContainerChildren",
	"flexItemsAndInFlowPseudos",
	"flexItemsGridItemsAbsolutelyPositionedContainerChildren",
	"flexItemsGridItemsAndAbsolutelyPositionedBoxes",
	"floats",
	"gridContainers",
	"gridContainersWithMasonryLayout",
	"gridContainersWithMasonryLayoutInTheirBlockAxis",
	"gridContainersWithMasonryLayoutInTheirInlineAxis",
	"gridItemsAndBoxesWithinGridContainer",
	"iframeElements",
	"images",
	"inFlowBlockLevelElements",
	"inFlowChildrenOfBoxElements",
	"inlineBoxesAndBlockContainers",
	"inlineLevelAndTableCellElements",
	"listItems",
	"maskElements",
	"multicolElements",
	"multiColumnElementsFlexContainersGridContainers",
	"multilineFlexContainers",
	"nonReplacedBlockAndInlineBlockElements",
	"nonReplacedBlockElements",
	"nonReplacedElements",
	"nonReplacedInlineElements",
	"positionedElements",
	"replacedElements",
	"rubyAnnotationsContainers",
	"rubyBasesAnnotationsBaseAnnotationContainers",
	"sameAsMargin",
	"sameAsWidthAndHeight",
	"scrollContainers",
	"scrollingBoxes",
	"sensitiveTextInputs",
	"tableCaptionElements",
	"tableCellElements",
	"tableElements",
	"textAndBlockContainers",
	"textElements",
	"textFields",
	"transformableElements",
	"xulImageElements",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AnimationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AnimationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AnimationType, v)
	}
	*j = AnimationType(v)
	return nil
}

var enumValues_AnimationType = []interface{}{
	"angleBasicShapeOrPath",
	"angleOrBasicShapeOrPath",
	"basicShapeOtherwiseNo",
	"byComputedValueType",
	"byComputedValueTypeNormalAnimatesAsObliqueZeroDeg",
	"color",
	"discrete",
	"discreteButVisibleForDurationWhenAnimatedHidden",
	"discreteButVisibleForDurationWhenAnimatedNone",
	"eachOfShorthandPropertiesExceptUnicodeBiDiAndDirection",
	"filterList",
	"fontStretch",
	"fontWeight",
	"integer",
	"length",
	"lpc",
	"notAnimatable",
	"numberOrLength",
	"number",
	"position",
	"rectangle",
	"repeatableList",
	"shadowList",
	"simpleListOfLpc",
	"simpleListOfLpcDifferenceLpc",
	"transform",
	"visibility",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AlsoApplyToElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AlsoApplyToElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AlsoApplyToElem, v)
	}
	*j = AlsoApplyToElem(v)
	return nil
}

var enumValues_Order = []interface{}{
	"canonicalOrder",
	"lengthOrPercentageBeforeKeywordIfBothPresent",
	"lengthOrPercentageBeforeKeywords",
	"oneOrTwoValuesLengthAbsoluteKeywordsPercentages",
	"orderOfAppearance",
	"percentagesOrLengthsFollowedByFill",
	"perGrammar",
	"uniqueOrder",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Order) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Order {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Order, v)
	}
	*j = Order(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Computed) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Computed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Computed, v)
	}
	*j = Computed(v)
	return nil
}

var enumValues_Percentages = []interface{}{
	"blockSizeOfContainingBlock",
	"dependsOnLayoutModel",
	"inlineSizeOfContainingBlock",
	"lengthsAsPercentages",
	"logicalHeightOfContainingBlock",
	"logicalWidthOfContainingBlock",
	"logicalHeightOrWidthOfContainingBlock",
	"mapToRange0To1",
	"maxZoomFactor",
	"minZoomFactor",
	"no",
	"referToBorderBox",
	"referToContainingBlockHeight",
	"referToDimensionOfBorderBox",
	"referToDimensionOfContentArea",
	"referToElementFontSize",
	"referToFlexContainersInnerMainSize",
	"referToHeightOfBackgroundPositioningAreaMinusBackgroundImageHeight",
	"referToLineBoxWidth",
	"referToLineHeight",
	"referToParentElementsFontSize",
	"referToSizeOfBackgroundPositioningAreaMinusBackgroundImageSize",
	"referToSizeOfBorderImage",
	"referToSizeOfBoundingBox",
	"referToSizeOfContainingBlock",
	"referToSizeOfElement",
	"referToSizeOfFont",
	"referToSizeOfMaskBorderImage",
	"referToSizeOfMaskPaintingArea",
	"referToTotalPathLength",
	"referToWidthAndHeightOfElement",
	"referToWidthOfAffectedGlyph",
	"referToWidthOfBackgroundPositioningAreaMinusBackgroundImageWidth",
	"referToWidthOfContainingBlock",
	"referToWidthOrHeightOfBorderImageArea",
	"referToReferenceBoxWhenSpecifiedOtherwiseBorderBox",
	"regardingHeightOfGeneratedBoxContainingBlockPercentages0",
	"regardingHeightOfGeneratedBoxContainingBlockPercentagesNone",
	"regardingHeightOfGeneratedBoxContainingBlockPercentagesRelativeToContainingBlock",
	"relativeToBackgroundPositioningArea",
	"relativeToCorrespondingDimensionOfRelevantScrollport",
	"relativeToMaskBorderImageArea",
	"relativeToScrollContainerPaddingBoxAxis",
	"relativeToTheScrollContainersScrollport",
	"relativeToTimelineRangeIfSpecifiedOtherwiseEntireTimeline",
	"relativeToWidthAndHeight",
}

type PropertiesSchemaJson map[string]struct {
	// AlsoAppliesTo corresponds to the JSON schema field "alsoAppliesTo".
	AlsoAppliesTo AlsoApplyTo `json:"alsoAppliesTo,omitempty" yaml:"alsoAppliesTo,omitempty" mapstructure:"alsoAppliesTo,omitempty"`

	// AnimationType corresponds to the JSON schema field "animationType".
	AnimationType interface{} `json:"animationType" yaml:"animationType" mapstructure:"animationType"`

	// Appliesto corresponds to the JSON schema field "appliesto".
	Appliesto Appliesto_1 `json:"appliesto" yaml:"appliesto" mapstructure:"appliesto"`

	// Computed corresponds to the JSON schema field "computed".
	Computed interface{} `json:"computed" yaml:"computed" mapstructure:"computed"`

	// Groups corresponds to the JSON schema field "groups".
	Groups []GroupsElem `json:"groups" yaml:"groups" mapstructure:"groups"`

	// Inherited corresponds to the JSON schema field "inherited".
	Inherited bool `json:"inherited" yaml:"inherited" mapstructure:"inherited"`

	// Initial corresponds to the JSON schema field "initial".
	Initial interface{} `json:"initial" yaml:"initial" mapstructure:"initial"`

	// MdnUrl corresponds to the JSON schema field "mdn_url".
	MdnUrl *MdnUrl `json:"mdn_url,omitempty" yaml:"mdn_url,omitempty" mapstructure:"mdn_url,omitempty"`

	// Media corresponds to the JSON schema field "media".
	Media interface{} `json:"media,omitempty" yaml:"media,omitempty" mapstructure:"media,omitempty"`

	// Order corresponds to the JSON schema field "order".
	Order Order_1 `json:"order" yaml:"order" mapstructure:"order"`

	// Percentages corresponds to the JSON schema field "percentages".
	Percentages interface{} `json:"percentages" yaml:"percentages" mapstructure:"percentages"`

	// Stacking corresponds to the JSON schema field "stacking".
	Stacking *bool `json:"stacking,omitempty" yaml:"stacking,omitempty" mapstructure:"stacking,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status Status_1 `json:"status" yaml:"status" mapstructure:"status"`

	// Syntax corresponds to the JSON schema field "syntax".
	Syntax string `json:"syntax" yaml:"syntax" mapstructure:"syntax"`
}

const PercentagesRelativeToWidthAndHeight Percentages = "relativeToWidthAndHeight"

type PropertyList []string

type Status2 string

var enumValues_Status = []interface{}{
	"standard",
	"nonstandard",
	"experimental",
	"obsolete",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Status2) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Status {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Status, v)
	}
	*j = Status2(v)
	return nil
}

type Status string

const StatusExperimental Status = "experimental"
const StatusNonstandard Status = "nonstandard"
const StatusObsolete Status = "obsolete"
const StatusStandard Status = "standard"

var enumValues_AlsoApplyToElem = []interface{}{
	"::first-letter",
	"::first-line",
	"::placeholder",
}
var enumValues_GroupsElem = []interface{}{
	"Basic Selectors",
	"Combinators",
	"Compositing and Blending",
	"CSS Angles",
	"CSS Animations",
	"CSS Backgrounds and Borders",
	"CSS Basic User Interface",
	"CSS Box Model",
	"CSS Box Alignment",
	"CSS Break",
	"CSS Cascading and Inheritance",
	"CSS Charsets",
	"CSS Color",
	"CSS Columns",
	"CSS Conditional Rules",
	"CSS Containment",
	"CSS Counter Styles",
	"CSS Device Adaptation",
	"CSS Display",
	"CSS Flexible Box Layout",
	"CSS Flexible Lengths",
	"CSS Fonts",
	"CSS Fragmentation",
	"CSS Frequencies",
	"CSS Generated Content",
	"CSS Grid Layout",
	"CSS Houdini",
	"CSS Images",
	"CSS Inline",
	"CSS Lengths",
	"CSS Lists and Counters",
	"CSS Logical Properties",
	"CSS Masking",
	"CSS Miscellaneous",
	"CSS Motion Path",
	"CSS Namespaces",
	"CSS Overflow",
	"CSS Pages",
	"CSS Positioning",
	"CSS Regions",
	"CSS Resolutions",
	"CSS Ruby",
	"CSS Scroll Anchoring",
	"CSS Scrollbars",
	"CSS Scroll Snap",
	"CSS Shadow Parts",
	"CSS Shapes",
	"CSS Speech",
	"CSS Table",
	"CSS Text",
	"CSS Text Decoration",
	"CSS Times",
	"CSS Transforms",
	"CSS Transitions",
	"CSS Types",
	"CSS Units",
	"CSS Variables",
	"CSS View Transitions",
	"CSS Will Change",
	"CSS Writing Modes",
	"CSSOM View",
	"Filter Effects",
	"Grouping Selectors",
	"MathML",
	"Media Queries",
	"Microsoft Extensions",
	"Mozilla Extensions",
	"Pointer Events",
	"Pseudo",
	"Pseudo-classes",
	"Pseudo-elements",
	"Selectors",
	"WebKit Extensions",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GroupsElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GroupsElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GroupsElem, v)
	}
	*j = GroupsElem(v)
	return nil
}
